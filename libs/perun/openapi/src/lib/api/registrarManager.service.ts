/**
 * Perun RPC API
 * Perun Remote Procedure Calls Application Programming Interface
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: perun@cesnet.cz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { Application } from '../model/application';
// @ts-ignore
import { ApplicationForm } from '../model/applicationForm';
// @ts-ignore
import { ApplicationFormItem } from '../model/applicationFormItem';
// @ts-ignore
import { ApplicationFormItemData } from '../model/applicationFormItemData';
// @ts-ignore
import { ApplicationMail } from '../model/applicationMail';
// @ts-ignore
import { ApplicationOperationResult } from '../model/applicationOperationResult';
// @ts-ignore
import { EnrichedIdentity } from '../model/enrichedIdentity';
// @ts-ignore
import { Group } from '../model/group';
// @ts-ignore
import { Identity } from '../model/identity';
// @ts-ignore
import { InputAddApplicationMailForGroup } from '../model/inputAddApplicationMailForGroup';
// @ts-ignore
import { InputAddApplicationMailForVo } from '../model/inputAddApplicationMailForVo';
// @ts-ignore
import { InputCheckCheckboxHtml } from '../model/inputCheckCheckboxHtml';
// @ts-ignore
import { InputCheckHtmlInput } from '../model/inputCheckHtmlInput';
// @ts-ignore
import { InputConsolidate } from '../model/inputConsolidate';
// @ts-ignore
import { InputConsolidateIdentityUsingToken } from '../model/inputConsolidateIdentityUsingToken';
// @ts-ignore
import { InputFormItemData } from '../model/inputFormItemData';
// @ts-ignore
import { InputFormItemsData } from '../model/inputFormItemsData';
// @ts-ignore
import { InputGetPaginatedApplications } from '../model/inputGetPaginatedApplications';
// @ts-ignore
import { InputInvitationsFromCsv } from '../model/inputInvitationsFromCsv';
// @ts-ignore
import { InputInviteMemberCandidates } from '../model/inputInviteMemberCandidates';
// @ts-ignore
import { InputSendMessage } from '../model/inputSendMessage';
// @ts-ignore
import { InputSendMessages } from '../model/inputSendMessages';
// @ts-ignore
import { InputSetSendingEnabled } from '../model/inputSetSendingEnabled';
// @ts-ignore
import { InputSubmitApplication } from '../model/inputSubmitApplication';
// @ts-ignore
import { InputUpdateApplicationMail } from '../model/inputUpdateApplicationMail';
// @ts-ignore
import { InputUpdateForm } from '../model/inputUpdateForm';
// @ts-ignore
import { InputUpdateFormItemTexts } from '../model/inputUpdateFormItemTexts';
// @ts-ignore
import { InputUpdateFormItemsForGroup } from '../model/inputUpdateFormItemsForGroup';
// @ts-ignore
import { InputUpdateFormItemsForVo } from '../model/inputUpdateFormItemsForVo';
// @ts-ignore
import { PaginatedRichApplications } from '../model/paginatedRichApplications';
// @ts-ignore
import { PerunException } from '../model/perunException';
// @ts-ignore
import { UserExtSource } from '../model/userExtSource';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class RegistrarManagerService {
  protected basePath = 'https://api-dev.perun-aai.org/ba/rpc';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Add new mail notification.
   * @param InputAddApplicationMailForGroup
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addApplicationMailForGroup(
    InputAddApplicationMailForGroup: InputAddApplicationMailForGroup,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<number>;
  public addApplicationMailForGroup(
    InputAddApplicationMailForGroup: InputAddApplicationMailForGroup,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<number>>;
  public addApplicationMailForGroup(
    InputAddApplicationMailForGroup: InputAddApplicationMailForGroup,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<number>>;
  public addApplicationMailForGroup(
    InputAddApplicationMailForGroup: InputAddApplicationMailForGroup,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputAddApplicationMailForGroup === null || InputAddApplicationMailForGroup === undefined) {
      throw new Error(
        'Required parameter InputAddApplicationMailForGroup was null or undefined when calling addApplicationMailForGroup.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/addApplicationMail/g`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<number>(requestUrl, InputAddApplicationMailForGroup, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Add new mail notification.
   * @param InputAddApplicationMailForVo
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addApplicationMailForVo(
    InputAddApplicationMailForVo: InputAddApplicationMailForVo,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<number>;
  public addApplicationMailForVo(
    InputAddApplicationMailForVo: InputAddApplicationMailForVo,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<number>>;
  public addApplicationMailForVo(
    InputAddApplicationMailForVo: InputAddApplicationMailForVo,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<number>>;
  public addApplicationMailForVo(
    InputAddApplicationMailForVo: InputAddApplicationMailForVo,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputAddApplicationMailForVo === null || InputAddApplicationMailForVo === undefined) {
      throw new Error(
        'Required parameter InputAddApplicationMailForVo was null or undefined when calling addApplicationMailForVo.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/addApplicationMail/v`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<number>(requestUrl, InputAddApplicationMailForVo, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Adds groups to a list of groups which can be registered into during vo registration.
   * @param groups list of Group ids List&lt;Integer&gt;
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @deprecated
   */
  public addGroupsToAutoRegistration(
    groups: Array<number>,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public addGroupsToAutoRegistration(
    groups: Array<number>,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public addGroupsToAutoRegistration(
    groups: Array<number>,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public addGroupsToAutoRegistration(
    groups: Array<number>,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (groups === null || groups === undefined) {
      throw new Error(
        'Required parameter groups was null or undefined when calling addGroupsToAutoRegistration.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (groups) {
      groups.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'groups[]',
        );
      });
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/addGroupsToAutoRegistration`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Adds groups to a list of groups which can be registered into during group registration.
   * @param groups list of Group ids List&lt;Integer&gt;
   * @param registrationGroup id of the group to which these groups are associated for the embedded registration
   * @param formItem id of of the form item
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addSubgroupsToAutoRegistration(
    groups: Array<number>,
    registrationGroup: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public addSubgroupsToAutoRegistration(
    groups: Array<number>,
    registrationGroup: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public addSubgroupsToAutoRegistration(
    groups: Array<number>,
    registrationGroup: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public addSubgroupsToAutoRegistration(
    groups: Array<number>,
    registrationGroup: number,
    formItem: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (groups === null || groups === undefined) {
      throw new Error(
        'Required parameter groups was null or undefined when calling addSubgroupsToAutoRegistration.',
      );
    }
    if (registrationGroup === null || registrationGroup === undefined) {
      throw new Error(
        'Required parameter registrationGroup was null or undefined when calling addSubgroupsToAutoRegistration.',
      );
    }
    if (formItem === null || formItem === undefined) {
      throw new Error(
        'Required parameter formItem was null or undefined when calling addSubgroupsToAutoRegistration.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (groups) {
      groups.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'groups[]',
        );
      });
    }
    if (registrationGroup !== undefined && registrationGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>registrationGroup,
        'registrationGroup',
      );
    }
    if (formItem !== undefined && formItem !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>formItem,
        'formItem',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/addGroupsToAutoRegistration/group`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Adds groups to a list of groups which can be registered into during vo registration.
   * @param groups list of Group ids List&lt;Integer&gt;
   * @param formItem id of of the form item
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addVoGroupsToAutoRegistration(
    groups: Array<number>,
    formItem: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public addVoGroupsToAutoRegistration(
    groups: Array<number>,
    formItem: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public addVoGroupsToAutoRegistration(
    groups: Array<number>,
    formItem: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public addVoGroupsToAutoRegistration(
    groups: Array<number>,
    formItem: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (groups === null || groups === undefined) {
      throw new Error(
        'Required parameter groups was null or undefined when calling addVoGroupsToAutoRegistration.',
      );
    }
    if (formItem === null || formItem === undefined) {
      throw new Error(
        'Required parameter formItem was null or undefined when calling addVoGroupsToAutoRegistration.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (groups) {
      groups.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'groups[]',
        );
      });
    }
    if (formItem !== undefined && formItem !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>formItem,
        'formItem',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/addGroupsToAutoRegistration/vo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Manually approves an application.
   * Expected to be called as a result of direct VO administrator action in the web UI.
   * @param id numeric id
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public approveApplication(
    id: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Application>;
  public approveApplication(
    id: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Application>>;
  public approveApplication(
    id: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Application>>;
  public approveApplication(
    id: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling approveApplication.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (id !== undefined && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>id, 'id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/approveApplication`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Application>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Manually approves multiple applications at once.
   * Expected to be called as a result of direct VO administrator action in the web UI.
   * @param ids list of ids List&lt;Integer&gt;
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public approveApplications(
    ids: Array<number>,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationOperationResult>>;
  public approveApplications(
    ids: Array<number>,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationOperationResult>>>;
  public approveApplications(
    ids: Array<number>,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationOperationResult>>>;
  public approveApplications(
    ids: Array<number>,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (ids === null || ids === undefined) {
      throw new Error(
        'Required parameter ids was null or undefined when calling approveApplications.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ids) {
      ids.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'ids[]',
        );
      });
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/approveApplications`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Array<ApplicationOperationResult>>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Creates an invitation link for the given vo/group and namespace (type of authentication)
   * @param voId id of vo for which the invitation link should be created, parent vo of the group if it should be a group invitation
   * @param groupId id of group for which the invitation link should be created
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public buildInviteURL(
    voId: number,
    groupId?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<string>;
  public buildInviteURL(
    voId: number,
    groupId?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<string>>;
  public buildInviteURL(
    voId: number,
    groupId?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<string>>;
  public buildInviteURL(
    voId: number,
    groupId?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (voId === null || voId === undefined) {
      throw new Error('Required parameter voId was null or undefined when calling buildInviteURL.');
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (voId !== undefined && voId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>voId, 'voId');
    }
    if (groupId !== undefined && groupId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>groupId,
        'groupId',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/buildInviteURL`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<string>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Check whether input html is safe for our application form item checkbox labels
   * @param InputCheckCheckboxHtml
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public checkCheckboxHtml(
    InputCheckCheckboxHtml: InputCheckCheckboxHtml,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public checkCheckboxHtml(
    InputCheckCheckboxHtml: InputCheckCheckboxHtml,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public checkCheckboxHtml(
    InputCheckCheckboxHtml: InputCheckCheckboxHtml,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public checkCheckboxHtml(
    InputCheckCheckboxHtml: InputCheckCheckboxHtml,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputCheckCheckboxHtml === null || InputCheckCheckboxHtml === undefined) {
      throw new Error(
        'Required parameter InputCheckCheckboxHtml was null or undefined when calling checkCheckboxHtml.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/checkCheckboxHtml`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputCheckCheckboxHtml, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Check for similar users by name and email in session (authz) information
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public checkForSimilarRichIdentities(
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<EnrichedIdentity>>;
  public checkForSimilarRichIdentities(
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<EnrichedIdentity>>>;
  public checkForSimilarRichIdentities(
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<EnrichedIdentity>>>;
  public checkForSimilarRichIdentities(
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/checkForSimilarRichIdentities`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Array<EnrichedIdentity>>(requestUrl, null, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Check for similar users by name and email in session (authz) information
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public checkForSimilarUsersWithAuthInfo(
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<Identity>>;
  public checkForSimilarUsersWithAuthInfo(
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<Identity>>>;
  public checkForSimilarUsersWithAuthInfo(
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<Identity>>>;
  public checkForSimilarUsersWithAuthInfo(
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/checkForSimilarUsers/authInfo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Array<Identity>>(requestUrl, null, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Checks whether input is valid html according to the rules in our custom html parser (returns warning message if the input will be autocompleted/changed during the sanitization)
   * @param InputCheckHtmlInput
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public checkHtmlInput(
    InputCheckHtmlInput: InputCheckHtmlInput,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<string>;
  public checkHtmlInput(
    InputCheckHtmlInput: InputCheckHtmlInput,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<string>>;
  public checkHtmlInput(
    InputCheckHtmlInput: InputCheckHtmlInput,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<string>>;
  public checkHtmlInput(
    InputCheckHtmlInput: InputCheckHtmlInput,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputCheckHtmlInput === null || InputCheckHtmlInput === undefined) {
      throw new Error(
        'Required parameter InputCheckHtmlInput was null or undefined when calling checkHtmlInput.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/checkHtmlInput`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<string>(requestUrl, InputCheckHtmlInput, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Resets the group application form to the state after creation - deletes all form items, removes modules and sets approval styles to manual.
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public clearGroupForm(
    group: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<ApplicationForm>;
  public clearGroupForm(
    group: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<ApplicationForm>>;
  public clearGroupForm(
    group: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<ApplicationForm>>;
  public clearGroupForm(
    group: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling clearGroupForm.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/clearGroupForm`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<ApplicationForm>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Resets the vo application form to the state after creation - deletes all form items, removes modules and sets approval styles to manual.
   * @param vo id of Vo
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public clearVoForm(
    vo: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<ApplicationForm>;
  public clearVoForm(
    vo: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<ApplicationForm>>;
  public clearVoForm(
    vo: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<ApplicationForm>>;
  public clearVoForm(
    vo: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error('Required parameter vo was null or undefined when calling clearVoForm.');
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/clearVoForm`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<ApplicationForm>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Join user identities by access tokens.
   * Join user identities by access tokens.
   * @param InputConsolidate
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public consolidate(
    InputConsolidate: InputConsolidate,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public consolidate(
    InputConsolidate: InputConsolidate,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public consolidate(
    InputConsolidate: InputConsolidate,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public consolidate(
    InputConsolidate: InputConsolidate,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputConsolidate === null || InputConsolidate === undefined) {
      throw new Error(
        'Required parameter InputConsolidate was null or undefined when calling consolidate.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/consolidate`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputConsolidate, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Joins current user identity with the one previously provided and referenced by the token.
   * @param InputConsolidateIdentityUsingToken
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public consolidateIdentityUsingToken(
    InputConsolidateIdentityUsingToken: InputConsolidateIdentityUsingToken,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<UserExtSource>>;
  public consolidateIdentityUsingToken(
    InputConsolidateIdentityUsingToken: InputConsolidateIdentityUsingToken,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<UserExtSource>>>;
  public consolidateIdentityUsingToken(
    InputConsolidateIdentityUsingToken: InputConsolidateIdentityUsingToken,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<UserExtSource>>>;
  public consolidateIdentityUsingToken(
    InputConsolidateIdentityUsingToken: InputConsolidateIdentityUsingToken,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      InputConsolidateIdentityUsingToken === null ||
      InputConsolidateIdentityUsingToken === undefined
    ) {
      throw new Error(
        'Required parameter InputConsolidateIdentityUsingToken was null or undefined when calling consolidateIdentityUsingToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/consolidateIdentityUsingToken`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Array<UserExtSource>>(
      requestUrl,
      InputConsolidateIdentityUsingToken,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Copy all form items from selected Group into another.
   * @param fromGroup source group
   * @param toGroup destination group
   * @param idempotent when true existing target items are deleted
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public copyFormFromGroupToGroup(
    fromGroup?: number,
    toGroup?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public copyFormFromGroupToGroup(
    fromGroup?: number,
    toGroup?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public copyFormFromGroupToGroup(
    fromGroup?: number,
    toGroup?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public copyFormFromGroupToGroup(
    fromGroup?: number,
    toGroup?: number,
    idempotent?: boolean,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fromGroup !== undefined && fromGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fromGroup,
        'fromGroup',
      );
    }
    if (toGroup !== undefined && toGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>toGroup,
        'toGroup',
      );
    }
    if (idempotent !== undefined && idempotent !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>idempotent,
        'idempotent',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/copyForm/groupToGroup`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Copy all form items from selected Group into VO.
   * @param fromGroup source group
   * @param toVo destination VO
   * @param idempotent when true existing target items are deleted
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public copyFormFromGroupToVo(
    fromGroup?: number,
    toVo?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public copyFormFromGroupToVo(
    fromGroup?: number,
    toVo?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public copyFormFromGroupToVo(
    fromGroup?: number,
    toVo?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public copyFormFromGroupToVo(
    fromGroup?: number,
    toVo?: number,
    idempotent?: boolean,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fromGroup !== undefined && fromGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fromGroup,
        'fromGroup',
      );
    }
    if (toVo !== undefined && toVo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>toVo, 'toVo');
    }
    if (idempotent !== undefined && idempotent !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>idempotent,
        'idempotent',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/copyForm/groupToVo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Copy all form items from selected VO into Group.
   * @param fromVo source VO
   * @param toGroup destination group
   * @param idempotent when true existing target items are deleted
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public copyFormFromVoToGroup(
    fromVo?: number,
    toGroup?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public copyFormFromVoToGroup(
    fromVo?: number,
    toGroup?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public copyFormFromVoToGroup(
    fromVo?: number,
    toGroup?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public copyFormFromVoToGroup(
    fromVo?: number,
    toGroup?: number,
    idempotent?: boolean,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fromVo !== undefined && fromVo !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fromVo,
        'fromVo',
      );
    }
    if (toGroup !== undefined && toGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>toGroup,
        'toGroup',
      );
    }
    if (idempotent !== undefined && idempotent !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>idempotent,
        'idempotent',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/copyForm/voToGroup`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Copy all form items from selected VO into another.
   * @param fromVo source VO
   * @param toVo destination VO
   * @param idempotent when true existing target items are deleted
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public copyFormFromVoToVo(
    fromVo?: number,
    toVo?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public copyFormFromVoToVo(
    fromVo?: number,
    toVo?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public copyFormFromVoToVo(
    fromVo?: number,
    toVo?: number,
    idempotent?: boolean,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public copyFormFromVoToVo(
    fromVo?: number,
    toVo?: number,
    idempotent?: boolean,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fromVo !== undefined && fromVo !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fromVo,
        'fromVo',
      );
    }
    if (toVo !== undefined && toVo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>toVo, 'toVo');
    }
    if (idempotent !== undefined && idempotent !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>idempotent,
        'idempotent',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/copyForm/voToVo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Copy all e-mail notifications from selected Group into another.
   * @param fromGroup source group
   * @param toGroup destination group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public copyMailsFromGroupToGroup(
    fromGroup?: number,
    toGroup?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public copyMailsFromGroupToGroup(
    fromGroup?: number,
    toGroup?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public copyMailsFromGroupToGroup(
    fromGroup?: number,
    toGroup?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public copyMailsFromGroupToGroup(
    fromGroup?: number,
    toGroup?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fromGroup !== undefined && fromGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fromGroup,
        'fromGroup',
      );
    }
    if (toGroup !== undefined && toGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>toGroup,
        'toGroup',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/copyMails/groupToGroup`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Copy all e-mail notifications from selected Group into VO.
   * @param fromGroup source group
   * @param toVo destination VO
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public copyMailsFromGroupToVo(
    fromGroup?: number,
    toVo?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public copyMailsFromGroupToVo(
    fromGroup?: number,
    toVo?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public copyMailsFromGroupToVo(
    fromGroup?: number,
    toVo?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public copyMailsFromGroupToVo(
    fromGroup?: number,
    toVo?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fromGroup !== undefined && fromGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fromGroup,
        'fromGroup',
      );
    }
    if (toVo !== undefined && toVo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>toVo, 'toVo');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/copyMails/groupToVo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Copy all e-mail notifications from selected VO into Group.
   * @param fromVo source VO
   * @param toGroup destination group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public copyMailsFromVoToGroup(
    fromVo?: number,
    toGroup?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public copyMailsFromVoToGroup(
    fromVo?: number,
    toGroup?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public copyMailsFromVoToGroup(
    fromVo?: number,
    toGroup?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public copyMailsFromVoToGroup(
    fromVo?: number,
    toGroup?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fromVo !== undefined && fromVo !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fromVo,
        'fromVo',
      );
    }
    if (toGroup !== undefined && toGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>toGroup,
        'toGroup',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/copyMails/voToGroup`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Copy all e-mail notifications from selected VO into another.
   * @param fromVo source VO
   * @param toVo destination VO
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public copyMailsFromVoToVo(
    fromVo?: number,
    toVo?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public copyMailsFromVoToVo(
    fromVo?: number,
    toVo?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public copyMailsFromVoToVo(
    fromVo?: number,
    toVo?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public copyMailsFromVoToVo(
    fromVo?: number,
    toVo?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fromVo !== undefined && fromVo !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fromVo,
        'fromVo',
      );
    }
    if (toVo !== undefined && toVo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>toVo, 'toVo');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/copyMails/voToVo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Create application form for a group.
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createApplicationFormInGroup(
    group: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public createApplicationFormInGroup(
    group: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public createApplicationFormInGroup(
    group: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public createApplicationFormInGroup(
    group: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling createApplicationFormInGroup.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/createApplicationForm/group`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Create application form for a VO.
   * @param vo id of Vo
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createApplicationFormInVo(
    vo: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public createApplicationFormInVo(
    vo: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public createApplicationFormInVo(
    vo: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public createApplicationFormInVo(
    vo: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling createApplicationFormInVo.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/createApplicationForm/vo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Deletes an application.
   * @param id numeric id
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteApplication(
    id: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public deleteApplication(
    id: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteApplication(
    id: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteApplication(
    id: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling deleteApplication.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (id !== undefined && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>id, 'id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/deleteApplication`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Deletes an e-mail notification from DB based on id property.
   * @param group id of Group
   * @param id numeric id
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteApplicationMailForGroup(
    group: number,
    id: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public deleteApplicationMailForGroup(
    group: number,
    id: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteApplicationMailForGroup(
    group: number,
    id: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteApplicationMailForGroup(
    group: number,
    id: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling deleteApplicationMailForGroup.',
      );
    }
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling deleteApplicationMailForGroup.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }
    if (id !== undefined && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>id, 'id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/deleteApplicationMail/g`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Deletes an e-mail notification from DB based on id property.
   * @param vo id of Vo
   * @param id numeric id
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteApplicationMailForVo(
    vo: number,
    id: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public deleteApplicationMailForVo(
    vo: number,
    id: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteApplicationMailForVo(
    vo: number,
    id: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteApplicationMailForVo(
    vo: number,
    id: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling deleteApplicationMailForVo.',
      );
    }
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling deleteApplicationMailForVo.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }
    if (id !== undefined && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>id, 'id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/deleteApplicationMail/v`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Manually deletes multiple applications at once.
   * Expected to be called as a result of direct VO administrator action in the web UI.
   * @param ids list of ids List&lt;Integer&gt;
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteApplications(
    ids: Array<number>,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationOperationResult>>;
  public deleteApplications(
    ids: Array<number>,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationOperationResult>>>;
  public deleteApplications(
    ids: Array<number>,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationOperationResult>>>;
  public deleteApplications(
    ids: Array<number>,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (ids === null || ids === undefined) {
      throw new Error(
        'Required parameter ids was null or undefined when calling deleteApplications.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ids) {
      ids.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'ids[]',
        );
      });
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/deleteApplications`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Array<ApplicationOperationResult>>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Deletes groups from a list of groups which can be registered into during vo registration.
   * @param groups list of Group ids List&lt;Integer&gt;
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @deprecated
   */
  public deleteGroupsFromAutoRegistration(
    groups: Array<number>,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public deleteGroupsFromAutoRegistration(
    groups: Array<number>,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteGroupsFromAutoRegistration(
    groups: Array<number>,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteGroupsFromAutoRegistration(
    groups: Array<number>,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (groups === null || groups === undefined) {
      throw new Error(
        'Required parameter groups was null or undefined when calling deleteGroupsFromAutoRegistration.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (groups) {
      groups.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'groups[]',
        );
      });
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/deleteGroupsFromAutoRegistration`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Deletes groups from a list of groups which can be registered into during group registration.
   * @param groups list of Group ids List&lt;Integer&gt;
   * @param registrationGroup id of the group to which these groups are associated for the embedded registration
   * @param formItem id of of the form item
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteSubgroupsFromAutoRegistration(
    groups: Array<number>,
    registrationGroup: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public deleteSubgroupsFromAutoRegistration(
    groups: Array<number>,
    registrationGroup: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteSubgroupsFromAutoRegistration(
    groups: Array<number>,
    registrationGroup: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteSubgroupsFromAutoRegistration(
    groups: Array<number>,
    registrationGroup: number,
    formItem: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (groups === null || groups === undefined) {
      throw new Error(
        'Required parameter groups was null or undefined when calling deleteSubgroupsFromAutoRegistration.',
      );
    }
    if (registrationGroup === null || registrationGroup === undefined) {
      throw new Error(
        'Required parameter registrationGroup was null or undefined when calling deleteSubgroupsFromAutoRegistration.',
      );
    }
    if (formItem === null || formItem === undefined) {
      throw new Error(
        'Required parameter formItem was null or undefined when calling deleteSubgroupsFromAutoRegistration.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (groups) {
      groups.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'groups[]',
        );
      });
    }
    if (registrationGroup !== undefined && registrationGroup !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>registrationGroup,
        'registrationGroup',
      );
    }
    if (formItem !== undefined && formItem !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>formItem,
        'formItem',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/deleteGroupsFromAutoRegistration/group`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Deletes groups from a list of groups which can be registered into during vo registration.
   * @param groups list of Group ids List&lt;Integer&gt;
   * @param formItem id of of the form item
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteVoGroupsFromAutoRegistration(
    groups: Array<number>,
    formItem: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public deleteVoGroupsFromAutoRegistration(
    groups: Array<number>,
    formItem: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteVoGroupsFromAutoRegistration(
    groups: Array<number>,
    formItem: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteVoGroupsFromAutoRegistration(
    groups: Array<number>,
    formItem: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (groups === null || groups === undefined) {
      throw new Error(
        'Required parameter groups was null or undefined when calling deleteVoGroupsFromAutoRegistration.',
      );
    }
    if (formItem === null || formItem === undefined) {
      throw new Error(
        'Required parameter formItem was null or undefined when calling deleteVoGroupsFromAutoRegistration.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (groups) {
      groups.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'groups[]',
        );
      });
    }
    if (formItem !== undefined && formItem !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>formItem,
        'formItem',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/deleteGroupsFromAutoRegistration/vo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Returns application object by its id.
   * @param id numeric id
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getApplicationById(
    id: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Application>;
  public getApplicationById(
    id: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Application>>;
  public getApplicationById(
    id: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Application>>;
  public getApplicationById(
    id: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getApplicationById.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (id !== undefined && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>id, 'id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationById`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Application>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Returns data submitted by user in given application (by id).
   * @param id numeric id
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getApplicationDataById(
    id: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationFormItemData>>;
  public getApplicationDataById(
    id: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationFormItemData>>>;
  public getApplicationDataById(
    id: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationFormItemData>>>;
  public getApplicationDataById(
    id: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getApplicationDataById.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (id !== undefined && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>id, 'id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationDataById`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<ApplicationFormItemData>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Returns all mail notifications related to specific app form.
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getApplicationMailsForGroup(
    group: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationMail>>;
  public getApplicationMailsForGroup(
    group: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationMail>>>;
  public getApplicationMailsForGroup(
    group: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationMail>>>;
  public getApplicationMailsForGroup(
    group: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling getApplicationMailsForGroup.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationMails/g`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<ApplicationMail>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Returns all mail notifications related to specific app form.
   * @param vo id of Vo
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getApplicationMailsForVo(
    vo: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationMail>>;
  public getApplicationMailsForVo(
    vo: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationMail>>>;
  public getApplicationMailsForVo(
    vo: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationMail>>>;
  public getApplicationMailsForVo(
    vo: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling getApplicationMailsForVo.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationMails/v`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<ApplicationMail>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets all applications for a given Group.
   * @param group id of Group
   * @param state list of states: NEW, VERIFIED, APPROVED, REJECTED
   * @param dateFrom return with the same date or applications newer than this date
   * @param dateTo return applications with the same date or older than this date
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getApplicationsForGroup(
    group: number,
    state?: Array<string>,
    dateFrom?: string,
    dateTo?: string,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<Application>>;
  public getApplicationsForGroup(
    group: number,
    state?: Array<string>,
    dateFrom?: string,
    dateTo?: string,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<Application>>>;
  public getApplicationsForGroup(
    group: number,
    state?: Array<string>,
    dateFrom?: string,
    dateTo?: string,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<Application>>>;
  public getApplicationsForGroup(
    group: number,
    state?: Array<string>,
    dateFrom?: string,
    dateTo?: string,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling getApplicationsForGroup.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }
    if (state) {
      state.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'state[]',
        );
      });
    }
    if (dateFrom !== undefined && dateFrom !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>dateFrom,
        'dateFrom',
      );
    }
    if (dateTo !== undefined && dateTo !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>dateTo,
        'dateTo',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationsForGroup`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<Application>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets all aplications for a given Member.
   * @param member id of Member
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getApplicationsForMember(
    member: number,
    group?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<Application>>;
  public getApplicationsForMember(
    member: number,
    group?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<Application>>>;
  public getApplicationsForMember(
    member: number,
    group?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<Application>>>;
  public getApplicationsForMember(
    member: number,
    group?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (member === null || member === undefined) {
      throw new Error(
        'Required parameter member was null or undefined when calling getApplicationsForMember.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (member !== undefined && member !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>member,
        'member',
      );
    }
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationsForMember`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<Application>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets all applications for a given VO.
   * @param vo id of Vo
   * @param state list of states: NEW, VERIFIED, APPROVED, REJECTED
   * @param dateFrom return applications with the same date or newer than this date
   * @param dateTo return applications with the same date or older than this date
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getApplicationsForVo(
    vo: number,
    state?: Array<string>,
    dateFrom?: string,
    dateTo?: string,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<Application>>;
  public getApplicationsForVo(
    vo: number,
    state?: Array<string>,
    dateFrom?: string,
    dateTo?: string,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<Application>>>;
  public getApplicationsForVo(
    vo: number,
    state?: Array<string>,
    dateFrom?: string,
    dateTo?: string,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<Application>>>;
  public getApplicationsForVo(
    vo: number,
    state?: Array<string>,
    dateFrom?: string,
    dateTo?: string,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling getApplicationsForVo.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }
    if (state) {
      state.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'state[]',
        );
      });
    }
    if (dateFrom !== undefined && dateFrom !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>dateFrom,
        'dateFrom',
      );
    }
    if (dateTo !== undefined && dateTo !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>dateTo,
        'dateTo',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationsForVo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<Application>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Get page of applications from the given vo, based on the query attributes.
   * @param InputGetPaginatedApplications
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getApplicationsPage(
    InputGetPaginatedApplications: InputGetPaginatedApplications,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<PaginatedRichApplications>;
  public getApplicationsPage(
    InputGetPaginatedApplications: InputGetPaginatedApplications,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<PaginatedRichApplications>>;
  public getApplicationsPage(
    InputGetPaginatedApplications: InputGetPaginatedApplications,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<PaginatedRichApplications>>;
  public getApplicationsPage(
    InputGetPaginatedApplications: InputGetPaginatedApplications,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputGetPaginatedApplications === null || InputGetPaginatedApplications === undefined) {
      throw new Error(
        'Required parameter InputGetPaginatedApplications was null or undefined when calling getApplicationsPage.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationsPage`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<PaginatedRichApplications>(
      requestUrl,
      InputGetPaginatedApplications,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get time-limited token proving user identity in external source (for now 3 minutes).
   * It can be used to join user identity with another by calling consolidateIdentityUsingToken() method and passing the token. Please note, that different authz (identity) must be used to perform both calls.
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getConsolidatorToken(
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<string>;
  public getConsolidatorToken(
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<string>>;
  public getConsolidatorToken(
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<string>>;
  public getConsolidatorToken(
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getConsolidatorToken`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<string>(requestUrl, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets a form item by its id.
   * @param id numeric id
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFormItemById(
    id: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<ApplicationFormItem>;
  public getFormItemById(
    id: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<ApplicationFormItem>>;
  public getFormItemById(
    id: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<ApplicationFormItem>>;
  public getFormItemById(
    id: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getFormItemById.');
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (id !== undefined && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>id, 'id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/getFormItemById`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<ApplicationFormItem>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets all items in Group application form.
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFormItemsForGroup(
    group: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationFormItem>>;
  public getFormItemsForGroup(
    group: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationFormItem>>>;
  public getFormItemsForGroup(
    group: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationFormItem>>>;
  public getFormItemsForGroup(
    group: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling getFormItemsForGroup.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getFormItems/group`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<ApplicationFormItem>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets items of specified type in Group application form, for initital registration or extension of account.
   * @param group id of Group
   * @param type application type: INITIAL, EXTENSION or EMBEDDED
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFormItemsForGroupWithType(
    group: number,
    type?: string,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationFormItem>>;
  public getFormItemsForGroupWithType(
    group: number,
    type?: string,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationFormItem>>>;
  public getFormItemsForGroupWithType(
    group: number,
    type?: string,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationFormItem>>>;
  public getFormItemsForGroupWithType(
    group: number,
    type?: string,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling getFormItemsForGroupWithType.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }
    if (type !== undefined && type !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>type, 'type');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getFormItems/group-type`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<ApplicationFormItem>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets all items in VO application form.
   * @param vo id of Vo
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFormItemsForVo(
    vo: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationFormItem>>;
  public getFormItemsForVo(
    vo: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationFormItem>>>;
  public getFormItemsForVo(
    vo: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationFormItem>>>;
  public getFormItemsForVo(
    vo: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling getFormItemsForVo.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getFormItems/vo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<ApplicationFormItem>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets items of specified type in VO application form, for initital registration or extension of account.
   * @param vo id of Vo
   * @param type application type: INITIAL or EXTENSION
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFormItemsForVoWithType(
    vo: number,
    type?: string,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationFormItem>>;
  public getFormItemsForVoWithType(
    vo: number,
    type?: string,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationFormItem>>>;
  public getFormItemsForVoWithType(
    vo: number,
    type?: string,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationFormItem>>>;
  public getFormItemsForVoWithType(
    vo: number,
    type?: string,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling getFormItemsForVoWithType.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }
    if (type !== undefined && type !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>type, 'type');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getFormItems/vo-type`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<ApplicationFormItem>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets an application form for a given Group.
   * There is exactly one form for membership per Group, one form is used for both initial registration and annual account expansion, just the form items are marked whether the should be present in one, the other, or both types of application.
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getGroupApplicationForm(
    group: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<ApplicationForm>;
  public getGroupApplicationForm(
    group: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<ApplicationForm>>;
  public getGroupApplicationForm(
    group: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<ApplicationForm>>;
  public getGroupApplicationForm(
    group: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling getGroupApplicationForm.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationForm/group`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<ApplicationForm>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Returns all groups which can be registered into during vo registration.
   * @param vo id of Vo
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @deprecated
   */
  public getGroupsToAutoRegistration(
    vo: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<Group>>;
  public getGroupsToAutoRegistration(
    vo: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<Group>>>;
  public getGroupsToAutoRegistration(
    vo: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<Group>>>;
  public getGroupsToAutoRegistration(
    vo: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling getGroupsToAutoRegistration.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getGroupsToAutoRegistration`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<Group>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Returns all groups which can be registered into during group registration.
   * @param group id of Group
   * @param formItem id of of the form item
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSubgroupsToAutoRegistration(
    group: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<Group>>;
  public getSubgroupsToAutoRegistration(
    group: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<Group>>>;
  public getSubgroupsToAutoRegistration(
    group: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<Group>>>;
  public getSubgroupsToAutoRegistration(
    group: number,
    formItem: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling getSubgroupsToAutoRegistration.',
      );
    }
    if (formItem === null || formItem === undefined) {
      throw new Error(
        'Required parameter formItem was null or undefined when calling getSubgroupsToAutoRegistration.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }
    if (formItem !== undefined && formItem !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>formItem,
        'formItem',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getGroupsToAutoRegistration/group`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<Group>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Gets an application form for a given VO.
   * There is exactly one form for membership per VO, one form is used for both initial registration and annual account expansion, just the form items are marked whether the should be present in one, the other, or both types of application.
   * @param vo id of Vo
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getVoApplicationForm(
    vo: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<ApplicationForm>;
  public getVoApplicationForm(
    vo: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<ApplicationForm>>;
  public getVoApplicationForm(
    vo: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<ApplicationForm>>;
  public getVoApplicationForm(
    vo: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling getVoApplicationForm.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getApplicationForm/vo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<ApplicationForm>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Returns all groups which can be registered into during vo registration.
   * @param vo id of Vo
   * @param formItem id of of the form item
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getVoGroupsToAutoRegistration(
    vo: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<Group>>;
  public getVoGroupsToAutoRegistration(
    vo: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<Group>>>;
  public getVoGroupsToAutoRegistration(
    vo: number,
    formItem: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<Group>>>;
  public getVoGroupsToAutoRegistration(
    vo: number,
    formItem: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling getVoGroupsToAutoRegistration.',
      );
    }
    if (formItem === null || formItem === undefined) {
      throw new Error(
        'Required parameter formItem was null or undefined when calling getVoGroupsToAutoRegistration.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }
    if (formItem !== undefined && formItem !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>formItem,
        'formItem',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/getGroupsToAutoRegistration/vo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<Array<Group>>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Checks if invitation form and invitation notification exist.
   * @param vo id of Vo
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public invitationFormExists(
    vo: number,
    group?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<boolean>;
  public invitationFormExists(
    vo: number,
    group?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<boolean>>;
  public invitationFormExists(
    vo: number,
    group?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<boolean>>;
  public invitationFormExists(
    vo: number,
    group?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling invitationFormExists.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/invitationFormExists`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<boolean>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Invite member candidates.
   * @param InputInviteMemberCandidates
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public inviteMemberCandidates(
    InputInviteMemberCandidates: InputInviteMemberCandidates,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public inviteMemberCandidates(
    InputInviteMemberCandidates: InputInviteMemberCandidates,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public inviteMemberCandidates(
    InputInviteMemberCandidates: InputInviteMemberCandidates,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public inviteMemberCandidates(
    InputInviteMemberCandidates: InputInviteMemberCandidates,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputInviteMemberCandidates === null || InputInviteMemberCandidates === undefined) {
      throw new Error(
        'Required parameter InputInviteMemberCandidates was null or undefined when calling inviteMemberCandidates.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/inviteMemberCandidates`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputInviteMemberCandidates, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Checks if invitation via notification is enabled (invitation notification exists, application form exists and application form can be submitted).
   * @param vo id of Vo
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public isInvitationEnabled(
    vo: number,
    group?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<boolean>;
  public isInvitationEnabled(
    vo: number,
    group?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<boolean>>;
  public isInvitationEnabled(
    vo: number,
    group?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<boolean>>;
  public isInvitationEnabled(
    vo: number,
    group?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling isInvitationEnabled.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/isInvitationEnabled`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<boolean>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Checks if invitation via link is enabled (application form exists and application form can be submitted).
   * @param vo id of Vo
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public isLinkInvitationEnabled(
    vo: number,
    group?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<boolean>;
  public isLinkInvitationEnabled(
    vo: number,
    group?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<boolean>>;
  public isLinkInvitationEnabled(
    vo: number,
    group?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<boolean>>;
  public isLinkInvitationEnabled(
    vo: number,
    group?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling isLinkInvitationEnabled.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/isLinkInvitationEnabled`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<boolean>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Checks if pre-approved invitation via notification is enabled (pre-approved invitation notification exists, application form exists and application form can be submitted).
   * @param vo id of Vo
   * @param group id of Group
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public isPreApprovedInvitationEnabled(
    vo: number,
    group: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<boolean>;
  public isPreApprovedInvitationEnabled(
    vo: number,
    group: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<boolean>>;
  public isPreApprovedInvitationEnabled(
    vo: number,
    group: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<boolean>>;
  public isPreApprovedInvitationEnabled(
    vo: number,
    group: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (vo === null || vo === undefined) {
      throw new Error(
        'Required parameter vo was null or undefined when calling isPreApprovedInvitationEnabled.',
      );
    }
    if (group === null || group === undefined) {
      throw new Error(
        'Required parameter group was null or undefined when calling isPreApprovedInvitationEnabled.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (vo !== undefined && vo !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>vo, 'vo');
    }
    if (group !== undefined && group !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>group, 'group');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/isPreApprovedInvitationEnabled`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.get<boolean>(requestUrl, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Manually rejects an application.
   * Expected to be called as a result of direct VO administrator action in the web UI.
   * @param id numeric id
   * @param reason description of reason
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public rejectApplication(
    id: number,
    reason?: string,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Application>;
  public rejectApplication(
    id: number,
    reason?: string,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Application>>;
  public rejectApplication(
    id: number,
    reason?: string,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Application>>;
  public rejectApplication(
    id: number,
    reason?: string,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling rejectApplication.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (id !== undefined && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>id, 'id');
    }
    if (reason !== undefined && reason !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>reason,
        'reason',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/rejectApplication`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Application>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Manually rejects multiple applications at once.
   * Expected to be called as a result of direct VO administrator action in the web UI.
   * @param ids list of ids List&lt;Integer&gt;
   * @param reason description of reason
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public rejectApplications(
    ids: Array<number>,
    reason?: string,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Array<ApplicationOperationResult>>;
  public rejectApplications(
    ids: Array<number>,
    reason?: string,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Array<ApplicationOperationResult>>>;
  public rejectApplications(
    ids: Array<number>,
    reason?: string,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Array<ApplicationOperationResult>>>;
  public rejectApplications(
    ids: Array<number>,
    reason?: string,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (ids === null || ids === undefined) {
      throw new Error(
        'Required parameter ids was null or undefined when calling rejectApplications.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ids) {
      ids.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(
          localVarQueryParameters,
          <any>element,
          'ids[]',
        );
      });
    }
    if (reason !== undefined && reason !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>reason,
        'reason',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/rejectApplications`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Array<ApplicationOperationResult>>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Sends invitation email to user which is not member of VO
   * @param email email address to send invitation to
   * @param language preferred language to use
   * @param voId id of VO to send invitation into
   * @param name name of person used in invitation email (optional)
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public sendInvitation(
    email: string,
    language: string,
    voId?: number,
    name?: string,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public sendInvitation(
    email: string,
    language: string,
    voId?: number,
    name?: string,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public sendInvitation(
    email: string,
    language: string,
    voId?: number,
    name?: string,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public sendInvitation(
    email: string,
    language: string,
    voId?: number,
    name?: string,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (email === null || email === undefined) {
      throw new Error(
        'Required parameter email was null or undefined when calling sendInvitation.',
      );
    }
    if (language === null || language === undefined) {
      throw new Error(
        'Required parameter language was null or undefined when calling sendInvitation.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (voId !== undefined && voId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>voId, 'voId');
    }
    if (name !== undefined && name !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>name, 'name');
    }
    if (email !== undefined && email !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>email, 'email');
    }
    if (language !== undefined && language !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>language,
        'language',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/sendInvitation`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Sends invitation email to user which is not member of VO and Group
   * Invitation link targets VO application form fist, after submission, Group application form is displayed.
   * @param email email address to send invitation to
   * @param language preferred language to use
   * @param voId id of VO to send invitation into
   * @param groupId id of Group to send invitation into
   * @param name name of person used in invitation email (optional)
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public sendInvitationForGroup(
    email: string,
    language: string,
    voId?: number,
    groupId?: number,
    name?: string,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public sendInvitationForGroup(
    email: string,
    language: string,
    voId?: number,
    groupId?: number,
    name?: string,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public sendInvitationForGroup(
    email: string,
    language: string,
    voId?: number,
    groupId?: number,
    name?: string,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public sendInvitationForGroup(
    email: string,
    language: string,
    voId?: number,
    groupId?: number,
    name?: string,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (email === null || email === undefined) {
      throw new Error(
        'Required parameter email was null or undefined when calling sendInvitationForGroup.',
      );
    }
    if (language === null || language === undefined) {
      throw new Error(
        'Required parameter language was null or undefined when calling sendInvitationForGroup.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (voId !== undefined && voId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>voId, 'voId');
    }
    if (groupId !== undefined && groupId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>groupId,
        'groupId',
      );
    }
    if (name !== undefined && name !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>name, 'name');
    }
    if (email !== undefined && email !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>email, 'email');
    }
    if (language !== undefined && language !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>language,
        'language',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/sendInvitation/g`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Sends invitation email to user which is not member of Group
   * @param userId id of user to send invitation to
   * @param voId id of VO to send invitation into
   * @param groupId id of Group to send invitation into
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public sendInvitationGroupToExistingUser(
    userId?: number,
    voId?: number,
    groupId?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public sendInvitationGroupToExistingUser(
    userId?: number,
    voId?: number,
    groupId?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public sendInvitationGroupToExistingUser(
    userId?: number,
    voId?: number,
    groupId?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public sendInvitationGroupToExistingUser(
    userId?: number,
    voId?: number,
    groupId?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (userId !== undefined && userId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>userId,
        'userId',
      );
    }
    if (voId !== undefined && voId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>voId, 'voId');
    }
    if (groupId !== undefined && groupId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>groupId,
        'groupId',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/sendInvitation/u-g`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Sends invitation email to user which is not member of VO
   * @param userId id of user to send invitation to
   * @param voId id of VO to send invitation into
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public sendInvitationToExistingUser(
    userId?: number,
    voId?: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public sendInvitationToExistingUser(
    userId?: number,
    voId?: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public sendInvitationToExistingUser(
    userId?: number,
    voId?: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public sendInvitationToExistingUser(
    userId?: number,
    voId?: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (userId !== undefined && userId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>userId,
        'userId',
      );
    }
    if (voId !== undefined && voId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>voId, 'voId');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/sendInvitation/u`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Send invitations with link to VO / Group application form from provided csv data If VO or Group have non-empty attribute urn:perun:[vo/group]:attribute-def:def:applicationURL content is used as link to application form. Otherwise link is automatically generated based on required AUTHZ in template and registrar url set in /etc/perun/perun-registrar.properties. General errors result in exception being thrown, single failures are skipped and added to result
   * @param InputInvitationsFromCsv
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public sendInvitationsFromCsv(
    InputInvitationsFromCsv: InputInvitationsFromCsv,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<{ [key: string]: string }>;
  public sendInvitationsFromCsv(
    InputInvitationsFromCsv: InputInvitationsFromCsv,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<{ [key: string]: string }>>;
  public sendInvitationsFromCsv(
    InputInvitationsFromCsv: InputInvitationsFromCsv,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<{ [key: string]: string }>>;
  public sendInvitationsFromCsv(
    InputInvitationsFromCsv: InputInvitationsFromCsv,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputInvitationsFromCsv === null || InputInvitationsFromCsv === undefined) {
      throw new Error(
        'Required parameter InputInvitationsFromCsv was null or undefined when calling sendInvitationsFromCsv.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/sendInvitationsFromCsv`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<{ [key: string]: string }>(requestUrl, InputInvitationsFromCsv, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Re-send mail notification for existing application.
   * Message of specified type is sent only, when application is in expected state related to the notification. Note, that some data related to processing application are not available (e.g. list of exceptions during approval), since this method doesn\&#39;t perform any action with Application itself. Perun admin can send any notification except USER_INVITE type, see #sendInvitation() for this.
   * @param InputSendMessage
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public sendMessage(
    InputSendMessage: InputSendMessage,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public sendMessage(
    InputSendMessage: InputSendMessage,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public sendMessage(
    InputSendMessage: InputSendMessage,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public sendMessage(
    InputSendMessage: InputSendMessage,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputSendMessage === null || InputSendMessage === undefined) {
      throw new Error(
        'Required parameter InputSendMessage was null or undefined when calling sendMessage.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/sendMessage`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputSendMessage, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Manually re-sends mail notifications for existing applications.
   * Expected to be called as a result of direct VO administrator action in the web UI.
   * @param InputSendMessages
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public sendMessages(
    InputSendMessages: InputSendMessages,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public sendMessages(
    InputSendMessages: InputSendMessages,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public sendMessages(
    InputSendMessages: InputSendMessages,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public sendMessages(
    InputSendMessages: InputSendMessages,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputSendMessages === null || InputSendMessages === undefined) {
      throw new Error(
        'Required parameter InputSendMessages was null or undefined when calling sendMessages.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/sendMessages`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputSendMessages, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Enable or disable sending for list of mail definitions.
   * @param InputSetSendingEnabled
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public setSendingEnabled(
    InputSetSendingEnabled: InputSetSendingEnabled,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public setSendingEnabled(
    InputSetSendingEnabled: InputSetSendingEnabled,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public setSendingEnabled(
    InputSetSendingEnabled: InputSetSendingEnabled,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public setSendingEnabled(
    InputSetSendingEnabled: InputSetSendingEnabled,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputSetSendingEnabled === null || InputSetSendingEnabled === undefined) {
      throw new Error(
        'Required parameter InputSetSendingEnabled was null or undefined when calling setSendingEnabled.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/setSendingEnabled`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputSetSendingEnabled, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Creates a new application and if succeeds, trigger validation and approval. The method triggers approval for VOs with auto-approved applications.
   * @param InputSubmitApplication
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public submitApplication(
    InputSubmitApplication: InputSubmitApplication,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Application>;
  public submitApplication(
    InputSubmitApplication: InputSubmitApplication,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Application>>;
  public submitApplication(
    InputSubmitApplication: InputSubmitApplication,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Application>>;
  public submitApplication(
    InputSubmitApplication: InputSubmitApplication,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputSubmitApplication === null || InputSubmitApplication === undefined) {
      throw new Error(
        'Required parameter InputSubmitApplication was null or undefined when calling submitApplication.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/submitApplication`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Application>(requestUrl, InputSubmitApplication, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Updates an e-mail notification.
   * @param InputUpdateApplicationMail
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateApplicationMail(
    InputUpdateApplicationMail: InputUpdateApplicationMail,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public updateApplicationMail(
    InputUpdateApplicationMail: InputUpdateApplicationMail,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public updateApplicationMail(
    InputUpdateApplicationMail: InputUpdateApplicationMail,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public updateApplicationMail(
    InputUpdateApplicationMail: InputUpdateApplicationMail,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputUpdateApplicationMail === null || InputUpdateApplicationMail === undefined) {
      throw new Error(
        'Required parameter InputUpdateApplicationMail was null or undefined when calling updateApplicationMail.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/updateApplicationMail`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputUpdateApplicationMail, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Updates the form attributes, not the form items.
   * @param InputUpdateForm
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateForm(
    InputUpdateForm: InputUpdateForm,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<ApplicationForm>;
  public updateForm(
    InputUpdateForm: InputUpdateForm,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<ApplicationForm>>;
  public updateForm(
    InputUpdateForm: InputUpdateForm,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<ApplicationForm>>;
  public updateForm(
    InputUpdateForm: InputUpdateForm,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputUpdateForm === null || InputUpdateForm === undefined) {
      throw new Error(
        'Required parameter InputUpdateForm was null or undefined when calling updateForm.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/updateForm`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<ApplicationForm>(requestUrl, InputUpdateForm, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Update application form item data value, which was originally submitted by the User.
   * @param InputFormItemData
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateFormItemData(
    InputFormItemData: InputFormItemData,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public updateFormItemData(
    InputFormItemData: InputFormItemData,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public updateFormItemData(
    InputFormItemData: InputFormItemData,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public updateFormItemData(
    InputFormItemData: InputFormItemData,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputFormItemData === null || InputFormItemData === undefined) {
      throw new Error(
        'Required parameter InputFormItemData was null or undefined when calling updateFormItemData.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/updateFormItemData`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputFormItemData, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Update label, options, help and error message for specified form item.
   * @param InputUpdateFormItemTexts
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateFormItemTexts(
    InputUpdateFormItemTexts: InputUpdateFormItemTexts,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public updateFormItemTexts(
    InputUpdateFormItemTexts: InputUpdateFormItemTexts,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public updateFormItemTexts(
    InputUpdateFormItemTexts: InputUpdateFormItemTexts,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public updateFormItemTexts(
    InputUpdateFormItemTexts: InputUpdateFormItemTexts,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputUpdateFormItemTexts === null || InputUpdateFormItemTexts === undefined) {
      throw new Error(
        'Required parameter InputUpdateFormItemTexts was null or undefined when calling updateFormItemTexts.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/updateFormItemTexts`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputUpdateFormItemTexts, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Update application form items data, which was originally submitted by the User.
   * @param InputFormItemsData
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateFormItemsData(
    InputFormItemsData: InputFormItemsData,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any>;
  public updateFormItemsData(
    InputFormItemsData: InputFormItemsData,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public updateFormItemsData(
    InputFormItemsData: InputFormItemsData,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public updateFormItemsData(
    InputFormItemsData: InputFormItemsData,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputFormItemsData === null || InputFormItemsData === undefined) {
      throw new Error(
        'Required parameter InputFormItemsData was null or undefined when calling updateFormItemsData.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/updateFormItemsData`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<any>(requestUrl, InputFormItemsData, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Updates form items sent in list.
   * @param InputUpdateFormItemsForGroup
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateFormItemsForGroup(
    InputUpdateFormItemsForGroup: InputUpdateFormItemsForGroup,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<number>;
  public updateFormItemsForGroup(
    InputUpdateFormItemsForGroup: InputUpdateFormItemsForGroup,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<number>>;
  public updateFormItemsForGroup(
    InputUpdateFormItemsForGroup: InputUpdateFormItemsForGroup,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<number>>;
  public updateFormItemsForGroup(
    InputUpdateFormItemsForGroup: InputUpdateFormItemsForGroup,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputUpdateFormItemsForGroup === null || InputUpdateFormItemsForGroup === undefined) {
      throw new Error(
        'Required parameter InputUpdateFormItemsForGroup was null or undefined when calling updateFormItemsForGroup.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/updateFormItems/group`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<number>(requestUrl, InputUpdateFormItemsForGroup, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Updates form items sent in list.
   * @param InputUpdateFormItemsForVo
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateFormItemsForVo(
    InputUpdateFormItemsForVo: InputUpdateFormItemsForVo,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<number>;
  public updateFormItemsForVo(
    InputUpdateFormItemsForVo: InputUpdateFormItemsForVo,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<number>>;
  public updateFormItemsForVo(
    InputUpdateFormItemsForVo: InputUpdateFormItemsForVo,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<number>>;
  public updateFormItemsForVo(
    InputUpdateFormItemsForVo: InputUpdateFormItemsForVo,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (InputUpdateFormItemsForVo === null || InputUpdateFormItemsForVo === undefined) {
      throw new Error(
        'Required parameter InputUpdateFormItemsForVo was null or undefined when calling updateFormItemsForVo.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/json/registrarManager/updateFormItems/vo`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<number>(requestUrl, InputUpdateFormItemsForVo, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Forcefully marks application as verified (only when application was in NEW state).
   * @param id numeric id
   * @param useNon if set to true sends the request to the backend server as 'non' instead of the usual (oauth, krb...).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public verifyApplication(
    id: number,
    useNon?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<Application>;
  public verifyApplication(
    id: number,
    useNon?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<Application>>;
  public verifyApplication(
    id: number,
    useNon?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<Application>>;
  public verifyApplication(
    id: number,
    useNon: boolean = false,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling verifyApplication.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (id !== undefined && id !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>id, 'id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (BasicAuth) required
    localVarCredential = this.configuration.lookupCredential('BasicAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
    }

    // authentication (BearerAuth) required
    localVarCredential = this.configuration.lookupCredential('BearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let requestUrl = `${this.configuration.basePath}/urlinjsonout/registrarManager/verifyApplication`;
    if (useNon) {
      // replace the authentication part of url with 'non' authentication
      let helperUrl = new URL(requestUrl);
      let path = helperUrl.pathname.split('/');
      path[1] = 'non';
      helperUrl.pathname = path.join('/');
      requestUrl = helperUrl.toString();
    }
    return this.httpClient.post<Application>(requestUrl, null, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }
}
