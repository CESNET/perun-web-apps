/**
 * Perun RPC API
 * Perun Remote Procedure Calls Application Programming Interface
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: perun@cesnet.cz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { Facility } from '../model/facility';
import { InputGetFacilities } from '../model/inputGetFacilities';
import { InputGetMembersByUserAttributes } from '../model/inputGetMembersByUserAttributes';
import { InputGetResources } from '../model/inputGetResources';
import { InputGetResources1 } from '../model/inputGetResources1';
import { InputGetUsers } from '../model/inputGetUsers';
import { Member } from '../model/member';
import { PerunException } from '../model/perunException';
import { Resource } from '../model/resource';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class SearcherService {
  protected basePath = 'https://perun.cesnet.cz/krb/rpc';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  /**
   * Get list of resources that have attributes with partially matched values if allowPartialMatchForString is set to true, else with exactly matched values.
   * @param inputGetResources1
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAttributesMatchResources(
    inputGetResources1: InputGetResources1,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<Resource>>;
  public getAttributesMatchResources(
    inputGetResources1: InputGetResources1,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<Resource>>>;
  public getAttributesMatchResources(
    inputGetResources1: InputGetResources1,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<Resource>>>;
  public getAttributesMatchResources(
    inputGetResources1: InputGetResources1,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (inputGetResources1 === null || inputGetResources1 === undefined) {
      throw new Error(
        'Required parameter inputGetResources1 was null or undefined when calling getAttributesMatchResources.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // authentication (BasicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }
    // authentication (BearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Array<Resource>>(
      `${this.configuration.basePath}/json/searcher/getResources/attributes-match`,
      inputGetResources1,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get list of resources who have attributes with specific values.
   * @param inputGetResources
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAttributesResources(
    inputGetResources: InputGetResources,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<Resource>>;
  public getAttributesResources(
    inputGetResources: InputGetResources,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<Resource>>>;
  public getAttributesResources(
    inputGetResources: InputGetResources,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<Resource>>>;
  public getAttributesResources(
    inputGetResources: InputGetResources,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (inputGetResources === null || inputGetResources === undefined) {
      throw new Error(
        'Required parameter inputGetResources was null or undefined when calling getAttributesResources.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // authentication (BasicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }
    // authentication (BearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Array<Resource>>(
      `${this.configuration.basePath}/json/searcher/getResources/attributes`,
      inputGetResources,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get list of facilities who have attributes with specific values.
   * @param inputGetFacilities
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFacilities(
    inputGetFacilities: InputGetFacilities,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<Facility>>;
  public getFacilities(
    inputGetFacilities: InputGetFacilities,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<Facility>>>;
  public getFacilities(
    inputGetFacilities: InputGetFacilities,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<Facility>>>;
  public getFacilities(
    inputGetFacilities: InputGetFacilities,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (inputGetFacilities === null || inputGetFacilities === undefined) {
      throw new Error(
        'Required parameter inputGetFacilities was null or undefined when calling getFacilities.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // authentication (BasicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }
    // authentication (BearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Array<Facility>>(
      `${this.configuration.basePath}/json/searcher/getFacilities`,
      inputGetFacilities,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get list of members who have attributes with specific values.
   * @param inputGetMembersByUserAttributes
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMembersByUserAttributes(
    inputGetMembersByUserAttributes: InputGetMembersByUserAttributes,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<Member>>;
  public getMembersByUserAttributes(
    inputGetMembersByUserAttributes: InputGetMembersByUserAttributes,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<Member>>>;
  public getMembersByUserAttributes(
    inputGetMembersByUserAttributes: InputGetMembersByUserAttributes,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<Member>>>;
  public getMembersByUserAttributes(
    inputGetMembersByUserAttributes: InputGetMembersByUserAttributes,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (inputGetMembersByUserAttributes === null || inputGetMembersByUserAttributes === undefined) {
      throw new Error(
        'Required parameter inputGetMembersByUserAttributes was null or undefined when calling getMembersByUserAttributes.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // authentication (BasicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }
    // authentication (BearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Array<Member>>(
      `${this.configuration.basePath}/json/searcher/getMembersByUserAttributes`,
      inputGetMembersByUserAttributes,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get list of users who have attributes with specific values.
   * @param inputGetUsers
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUsersSearcher(
    inputGetUsers: InputGetUsers,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<User>>;
  public getUsersSearcher(
    inputGetUsers: InputGetUsers,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<User>>>;
  public getUsersSearcher(
    inputGetUsers: InputGetUsers,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<User>>>;
  public getUsersSearcher(
    inputGetUsers: InputGetUsers,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (inputGetUsers === null || inputGetUsers === undefined) {
      throw new Error(
        'Required parameter inputGetUsers was null or undefined when calling getUsersSearcher.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys && this.configuration.apiKeys['Authorization']) {
      headers = headers.set('Authorization', this.configuration.apiKeys['Authorization']);
    }

    // authentication (BasicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }
    // authentication (BearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Array<User>>(
      `${this.configuration.basePath}/json/searcher/getUsers`,
      inputGetUsers,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
