/**
 * Perun RPC API
 * Perun Remote Procedure Calls Application Programming Interface
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: perun@cesnet.cz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
let RTMessagesManagerService = class RTMessagesManagerService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://perun.cesnet.cz/krb/rpc';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    sentMessageToRTWithMemberQueue(memberId, queue, subject, text, observe = 'body', reportProgress = false) {
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling sentMessageToRTWithMemberQueue.');
        }
        if (queue === null || queue === undefined) {
            throw new Error('Required parameter queue was null or undefined when calling sentMessageToRTWithMemberQueue.');
        }
        if (subject === null || subject === undefined) {
            throw new Error('Required parameter subject was null or undefined when calling sentMessageToRTWithMemberQueue.');
        }
        if (text === null || text === undefined) {
            throw new Error('Required parameter text was null or undefined when calling sentMessageToRTWithMemberQueue.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (memberId !== undefined && memberId !== null) {
            queryParameters = queryParameters.set('memberId', memberId);
        }
        if (queue !== undefined && queue !== null) {
            queryParameters = queryParameters.set('queue', queue);
        }
        if (subject !== undefined && subject !== null) {
            queryParameters = queryParameters.set('subject', subject);
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', text);
        }
        let headers = this.defaultHeaders;
        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (BearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.post(`${this.configuration.basePath}/urlinjsonout/rtMessagesManager/sentMessageToRT/m-q`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    sentMessageToRTWithQueue(queue, subject, text, observe = 'body', reportProgress = false) {
        if (queue === null || queue === undefined) {
            throw new Error('Required parameter queue was null or undefined when calling sentMessageToRTWithQueue.');
        }
        if (subject === null || subject === undefined) {
            throw new Error('Required parameter subject was null or undefined when calling sentMessageToRTWithQueue.');
        }
        if (text === null || text === undefined) {
            throw new Error('Required parameter text was null or undefined when calling sentMessageToRTWithQueue.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (queue !== undefined && queue !== null) {
            queryParameters = queryParameters.set('queue', queue);
        }
        if (subject !== undefined && subject !== null) {
            queryParameters = queryParameters.set('subject', subject);
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', text);
        }
        let headers = this.defaultHeaders;
        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (BearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.post(`${this.configuration.basePath}/urlinjsonout/rtMessagesManager/sentMessageToRT/q`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    sentMessageToRTWithVo(voId, subject, text, observe = 'body', reportProgress = false) {
        if (voId === null || voId === undefined) {
            throw new Error('Required parameter voId was null or undefined when calling sentMessageToRTWithVo.');
        }
        if (subject === null || subject === undefined) {
            throw new Error('Required parameter subject was null or undefined when calling sentMessageToRTWithVo.');
        }
        if (text === null || text === undefined) {
            throw new Error('Required parameter text was null or undefined when calling sentMessageToRTWithVo.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (voId !== undefined && voId !== null) {
            queryParameters = queryParameters.set('voId', voId);
        }
        if (subject !== undefined && subject !== null) {
            queryParameters = queryParameters.set('subject', subject);
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', text);
        }
        let headers = this.defaultHeaders;
        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (BearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.post(`${this.configuration.basePath}/urlinjsonout/rtMessagesManager/sentMessageToRT/v`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    sentMessageToRTWithVoQueue(voId, queue, subject, text, observe = 'body', reportProgress = false) {
        if (voId === null || voId === undefined) {
            throw new Error('Required parameter voId was null or undefined when calling sentMessageToRTWithVoQueue.');
        }
        if (queue === null || queue === undefined) {
            throw new Error('Required parameter queue was null or undefined when calling sentMessageToRTWithVoQueue.');
        }
        if (subject === null || subject === undefined) {
            throw new Error('Required parameter subject was null or undefined when calling sentMessageToRTWithVoQueue.');
        }
        if (text === null || text === undefined) {
            throw new Error('Required parameter text was null or undefined when calling sentMessageToRTWithVoQueue.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (voId !== undefined && voId !== null) {
            queryParameters = queryParameters.set('voId', voId);
        }
        if (queue !== undefined && queue !== null) {
            queryParameters = queryParameters.set('queue', queue);
        }
        if (subject !== undefined && subject !== null) {
            queryParameters = queryParameters.set('subject', subject);
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', text);
        }
        let headers = this.defaultHeaders;
        // authentication (ApiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // authentication (BearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.post(`${this.configuration.basePath}/urlinjsonout/rtMessagesManager/sentMessageToRT/v-q`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
};
RTMessagesManagerService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(1, Optional()), __param(1, Inject(BASE_PATH)), __param(2, Optional()),
    __metadata("design:paramtypes", [HttpClient, String, Configuration])
], RTMessagesManagerService);
export { RTMessagesManagerService };
//# sourceMappingURL=rTMessagesManager.service.js.map